@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using System.Web

@{
    var elementId = "recommendation-" + GetValue("ElementId");
    var recommendationsUrlBase = GetString("RecommendationsUrlBase");

    IEnumerable<string> productIds = null;

    // Compute a list of products used for getting recommendations

    // Example: Get products in cart
    var cart = Dynamicweb.eCommerce.Common.Context.Cart;
    if (cart != null && cart.OrderLines.Count > 0)
    {
        productIds = cart.OrderLines.Where(l => l.HasType(Dynamicweb.eCommerce.Orders.OrderLine.OrderLineType.Product)).Select(l => l.Product.ID);
        // productIds = cart.OrderLines.Where(l => l.HasType(Dynamicweb.eCommerce.Orders.OrderLine.OrderLineType.Product)).OrderByDescending(l => l.Date).Select(l => l.Product.ID);
    }
}

@if (!string.IsNullOrEmpty(recommendationsUrlBase) && productIds != null)
{
    @SnippetStart("StyleSheet")
    <link rel="stylesheet" href='@GetValue("Template:BaseUrl")stylesheets/Recommendation.min.css' />
    @SnippetEnd("StyleSheet")

    <div style="display: none" id="cart-content">
        @foreach (var line in cart.OrderLines.Where(l => l.HasType(Dynamicweb.eCommerce.Orders.OrderLine.OrderLineType.Product)))
        {
            <span data-product-id="@line.Product.ID"></span>
        }
    </div>

    <section class="recommendations" id="@elementId">
        <header><h1>@Translate("Recommendations")</h1></header>

        <div class="row content"></div>
    </section>

    <script src='@GetValue("Template:BaseUrl")javascripts/Recommendation.js'></script>
    <script>
        window.addEventListener('load', function () {
            var recommendationsUrl = '@recommendationsUrlBase',
                    Recommendation = Dynamicweb.Recommendation,
                    productIds = @Newtonsoft.Json.JsonConvert.SerializeObject(productIds),
                    productsQuery = Recommendation.getProductsQuery(productIds);

            if (productsQuery) {
                recommendationsUrl = Recommendation.addQueryString(recommendationsUrl, 'type=item', productsQuery);
                Recommendation.loadRecommendations({
                    recommendationsUrl: recommendationsUrl,
                    render: function (data) {
                        var container = document.querySelector('#@elementId .content');
                        if (data && data.Content) {
                            container.innerHTML = data.Content;
                        }
                    }
                });
            }

            var info = document.createElement('pre');
            info.classList.add('recommendation-info');
            info.innerHTML = [
                'Recommendations url (base):   <a href="' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrlBase")) + '" target="recommendations">' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrlBase")) + '</a>',
                'Recommendations url:          <a href="' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrl")) + '" target="recommendations">' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrl")) + '</a>',
                'Computed recommendations url: <a href="' + recommendationsUrl + '" target="recommendations">' + recommendationsUrl + '</a>',
            ].join('\n');
            document.body.appendChild(info);
        })</script>
}
