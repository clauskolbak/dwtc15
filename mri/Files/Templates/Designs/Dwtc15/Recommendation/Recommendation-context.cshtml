@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@*
    Render recommendations based on the current context, i.e. products shows on the page (with attribute data-product-id).

    Required module settings:
        Render recommendations: ✓
        Render recommendations catalog settings: select a product catalog
*@

@using System.Web

@{
    var elementId = "recommendation-" + GetValue("ElementId");
    var recommendationsUrlBase = GetString("RecommendationsUrlBase");
}

@if (!string.IsNullOrEmpty(recommendationsUrlBase))
{
    @SnippetStart("StyleSheet")
    <link rel="stylesheet" href='@GetValue("Template:BaseUrl")stylesheets/Recommendation.min.css' />
    @SnippetEnd("StyleSheet")

    <section class="recommendations" id="@elementId">
        <header><h1>@Translate("Recommendations")</h1></header>

        <div class="row content"></div>
    </section>

    <script src='@GetValue("Template:BaseUrl")javascripts/Recommendation.js'></script>
    <script>
        window.addEventListener('load', function () {
            try {
                var recommendationsUrl = '@recommendationsUrlBase',
                Recommendation = Dynamicweb.Recommendation,
                productsQuery = Recommendation.getProductsQuery();

                if (productsQuery) {
                    recommendationsUrl = Recommendation.addQueryString(recommendationsUrl, 'type=item', productsQuery);

                    Recommendation.loadRecommendations({
                        recommendationsUrl: recommendationsUrl,
                        render: function (data) {
                            var container = document.querySelector('#@elementId .content');
                            if (data && data.Content) {
                                container.innerHTML = data.Content;
                            }
                        }
                    });
                }

                var info = document.createElement('pre');
                info.classList.add('recommendation-info');
                info.innerHTML = [
                    'Recommendations url (base):   <a href="' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrlBase")) + '" target="recommendations">' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrlBase")) + '</a>',
                    'Recommendations url:          <a href="' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrl")) + '" target="recommendations">' + @Newtonsoft.Json.JsonConvert.SerializeObject(GetString("RecommendationsUrl")) + '</a>',
                    'Computed recommendations url: <a href="' + recommendationsUrl + '" target="recommendations">' + recommendationsUrl + '</a>',
                ].join('\n');
                document.body.appendChild(info);
            } catch (ex) {
                ;;; console.debug(ex);
            }
        })</script>
}
